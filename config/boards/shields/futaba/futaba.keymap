#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 120
#include <dt-bindings/zmk/pointing.h>

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#define NUM 1
#define MOUSE 2
#define SNIPE 3
#define SCROLL 4
#define SCROLL_WARP 5
#define SCROLL_SNIPE 6

&mmv {
    delay-ms = <0>;
    trigger-period-ms = <10>;
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <1>;
};

&msc {
    delay-ms = <0>;
    trigger-period-ms = <10>;
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <0>;
};

&mmv_input_listener {
    precision {
        layers = <SNIPE>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};

/ {
    input_processors {
        zip_wheel_scaler: zip_wheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_WHEEL>;
            track-remainders;
        };
        zip_hwheel_scaler: zip_hwheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_HWHEEL>;
            track-remainders;
        };
    };
};

&msc_input_listener {
    warp {
        layers = <SCROLL_WARP>;
        input-processors = <&zip_wheel_scaler 4 1>, <&zip_hwheel_scaler 4 1>;
    };
    precision {
        layers = <SCROLL_SNIPE>;
        input-processors = <&zip_wheel_scaler 1 4>, <&zip_hwheel_scaler 1 4>;
    };
};

&trackball_listener {
    scroller {
        layers = <SCROLL>;
        input-processors = <&zip_xy_to_scroll_mapper>;
    };
    scroller_warp {
        layers = <SCROLL_WARP>;
        input-processors = <&zip_xy_to_scroll_mapper>, <&zip_wheel_scaler 4 1>, <&zip_hwheel_scaler 4 1>;
    };
    scroller_precision {
        layers = <SCROLL_SNIPE>;
        input-processors = <&zip_xy_to_scroll_mapper>, <&zip_wheel_scaler 1 4>, <&zip_hwheel_scaler 1 4>;
    };
};

/ {
    behaviors {
        rot_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        mouse_click: mouse_button_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&mkp>, <&mkp>;
        };

        mouse_mv: mouse_cursor_move {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&mmv>, <&mmv>;
            tap-ms = <10>;
        };

        mouse_scrl: mouse_wheel_scrl {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;
            tap-ms = <10>;
        };

        ul_move: move_up_left {
            compatible = "zmk,behavior-mod-morph";
            label = "MOVE UP LEFT";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_LEFT>;
            mods = <MOD_LALT>;
        };

        dr_move: move_down_right {
            compatible = "zmk,behavior-mod-morph";
            label = "MOVE DOWN RIGHT";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_DOWN>, <&mmv MOVE_RIGHT>;
            mods = <MOD_LALT>;
        };

        uldr_move: move_up_left_down_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&ul_move>, <&dr_move>;
            tap-ms = <10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &lt SNIPE N1    &mo SCROLL        &kp N0       &mo NUM
                &mo SCROLL_WARP &mo SCROLL_SNIPE  &mt LALT N2  &kp N5
            >;
            sensor-bindings = <&uldr_move>, <&uldr_move>;
        };

        NUM {
            bindings = <
                &kp N1 &kp N2 &trans &kp N4
                &kp N5 &kp N6 &kp N7 &kp N8
            >;
            sensor-bindings = <&uldr_move>, <&uldr_move>;
        };

        MOUSE {
            bindings = <
                &trans &trans &kp N9 &trans 
                &mkp LCLK &mkp RCLK  &trans &trans
            >;
            sensor-bindings = <&uldr_move>, <&uldr_move>;
        };

        SNIPE {
            bindings = <
                &trans &trans &trans &trans 
                &mkp LCLK &mkp RCLK  &trans &trans
            >;
            sensor-bindings = <&uldr_move>, <&uldr_move>;
        };

        SCROLL {
            bindings = <
                &trans &trans &trans &trans 
                &trans &trans &trans &trans 
            >;
            sensor-bindings = <&mouse_scrl SCRL_DOWN SCRL_UP>, <&mouse_scrl SCRL_UP SCRL_DOWN>;
        };

        SCROLL_WARP {
            bindings = <
                &trans &trans &trans &trans 
                &trans &trans &trans &trans 
            >;
            sensor-bindings = <&mouse_scrl SCRL_DOWN SCRL_UP>, <&mouse_scrl SCRL_UP SCRL_DOWN>;
        };

        SCROLL_SNIPE {
            bindings = <
                &trans &trans &trans &trans 
                &trans &trans &trans &trans 
            >;
            sensor-bindings = <&mouse_scrl SCRL_DOWN SCRL_UP>, <&mouse_scrl SCRL_UP SCRL_DOWN>;
        };
    };
};
